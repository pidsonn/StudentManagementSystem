{
    "sourceFile": "src/main/java/pms/studentmanagement/StudentManagement.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1734519916860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734519953080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n =======\n import java.util.Arrays;\n \n >>>>>>> main\n-import pms.student.Student;\n+\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import java.io.IOException;\n"
                },
                {
                    "date": 1734520136800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n                     System.out.println(\"No student records to display.\");\n                 }\n             }\n         }\n-              // Add other methods like Add,Update,delete etc\n+              \n     \n     \n     \n     \n"
                },
                {
                    "date": 1734520194111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n import java.util.Comparator;\n import java.util.List;\n import java.io.IOException;\n \n-<<<<<<< HEAD\n public class StudentManagement {\n     private ArrayList<Student> students = new ArrayList<>();\n \n     // Add a new student\n@@ -91,9 +90,8 @@\n         }\n         return null; // Student not found\n     }\n }\n-=======\n import java.io.BufferedWriter;\n import java.io.FileWriter;\n import java.io.BufferedReader;\n import java.io.FileReader;\n@@ -218,5 +216,4 @@\n \n    \n  \n    \n->>>>>>> main\n"
                },
                {
                    "date": 1734520211434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,10 @@\n package pms.studentmanagement;\n \n import java.util.ArrayList;\n import pms.student.Student;\n-<<<<<<< HEAD\n-=======\n import java.util.Arrays;\n \n->>>>>>> main\n \n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n"
                },
                {
                    "date": 1734520434129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n package pms.studentmanagement;\n \n import java.util.ArrayList;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n import pms.student.Student;\n import java.util.Arrays;\n \n \n"
                },
                {
                    "date": 1734523665217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n \n import pms.student.Student;\n-import java.util.Arrays;\n \n \n+\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import java.io.IOException;\n"
                },
                {
                    "date": 1734523677420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n package pms.studentmanagement;\n \n import java.util.ArrayList;\n-import java.util.ArrayList;\n+\n import java.util.Arrays;\n \n import pms.student.Student;\n \n"
                },
                {
                    "date": 1734523865879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,219 +1,160 @@\n package pms.studentmanagement;\n \n-import java.util.ArrayList;\n-\n-import java.util.Arrays;\n-\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import pms.dao.DAO;\n+import pms.db.DBConnection;\n import pms.student.Student;\n \n+public class StudentManagement implements DAO {\n \n+    @Override\n+    public boolean insertStudent(Student s) {\n+        boolean flag = false;\n \n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.io.IOException;\n+        try {\n+            Connection con = DBConnection.createConnection();\n+            String query = \"INSERT INTO student (name, age, grade) VALUES (?, ?, ?)\";\n+            PreparedStatement pst = con.prepareStatement(query);\n \n-public class StudentManagement {\n-    private ArrayList<Student> students = new ArrayList<>();\n+            // Set the values for the parameters\n+            pst.setString(1, s.getName());\n+            pst.setInt(2, s.getAge());\n+            pst.setString(3, s.getGrade());\n \n-    // Add a new student\n-    public void addStudent(Student student) {\n-        students.add(student);\n-        System.out.println(\"Student added successfully!\");\n+            pst.executeUpdate(); // Execute the query\n+            flag = true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return flag;\n     }\n \n-    // Display all students\n-    public void displayStudents() {\n-        if (students.isEmpty()) {\n-            System.out.println(\"No students to display.\");\n-        } else {\n-            System.out.println(\"Student Records:\");\n-            for (Student student : students) {\n-                System.out.println(student);\n+    @Override\n+    public boolean delete(int id) {\n+        boolean flag = false;\n+\n+        try {\n+            Connection con = DBConnection.createConnection();\n+            String query = \"DELETE FROM student WHERE id = ?\";\n+            PreparedStatement pst = con.prepareStatement(query);\n+\n+            pst.setInt(1, id); // Set the ID parameter\n+            int rowsAffected = pst.executeUpdate();\n+\n+            if (rowsAffected > 0) {\n+                flag = true;\n             }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n         }\n+        return flag;\n     }\n \n-    // Find and delete a student by ID\n-    public boolean deleteStudent(int id) {\n-        boolean removed = false;\n-        for (Student student : students) {\n-            if (student.getId() == id) {\n-                students.remove(student);\n-                removed = true;\n-                break;\n+    @Override\n+    public void showAllStudents() {\n+        try {\n+            Connection con = DBConnection.createConnection();\n+            String query = \"SELECT * FROM student\";\n+            Statement stmt = con.createStatement();\n+            ResultSet rs = stmt.executeQuery(query);\n+\n+            while (rs.next()) {\n+                System.out.println(\"Id: \" + rs.getInt(1) +\n+                                   \"\\nName: \" + rs.getString(2) +\n+                                   \"\\nAge: \" + rs.getInt(3) +\n+                                   \"\\nGrade: \" + rs.getString(4));\n+                System.out.println(\"-------------------------------\");\n             }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n         }\n-        return removed;\n     }\n \n-    // Update a student's details\n-    public boolean updateStudent(int id, String newValue, int choice) {\n-        for (Student student : students) {\n-            if (student.getId() == id) {\n-                switch (choice) {\n-                    case 1: { // Update name\n-                        student.setName(newValue);\n-                        break;\n-                    }\n-                    case 2: { // Update age\n-                        try {\n-                            int newAge = Integer.parseInt(newValue);\n-                            student.setAge(newAge);\n-                        } catch (NumberFormatException e) {\n-                            System.out.println(\"Invalid age format. Please enter a number.\");\n-                            return false;\n-                        }\n-                        break;\n-                    }\n-                    case 3: { // Update grade\n-                        student.setGrade(newValue);\n-                        break;\n-                    }\n-                    default: {\n-                        System.out.println(\"Invalid update choice.\");\n-                        return false;\n-                    }\n-                }\n-                return true; // Update successful\n-            }\n+    @Override\n+public boolean update(int id, String update, int choice, Student s) {\n+    boolean flag = false;\n+\n+    try {\n+        Connection con = DBConnection.createConnection();\n+        String query = \"\";\n+\n+        switch (choice) {\n+            case 1: // Update name\n+                query = \"UPDATE student SET name = ? WHERE id = ?\";\n+                break;\n+            case 2: // Update age\n+                query = \"UPDATE student SET age = ? WHERE id = ?\";\n+                break;\n+            case 3: // Update grade\n+                query = \"UPDATE student SET grade = ? WHERE id = ?\";\n+                break;\n+            default:\n+                System.out.println(\"Invalid choice!\");\n+                return false;\n         }\n-        return false; // Student not found\n-    }\n \n-    // Search for a student by ID\n-    public Student searchStudent(int id) {\n-        for (Student student : students) {\n-            if (student.getId() == id) {\n-                return student;\n-            }\n+        PreparedStatement pst = con.prepareStatement(query);\n+\n+        // Set the parameter value based on choice\n+        if (choice == 1) {\n+            pst.setString(1, update); // Use the `update` parameter directly for name\n+        } else if (choice == 2) {\n+            pst.setInt(1, Integer.parseInt(update)); // Convert `update` to int for age\n+        } else if (choice == 3) {\n+            pst.setString(1, update); // Use the `update` parameter directly for grade\n         }\n-        return null; // Student not found\n+\n+        pst.setInt(2, id); // Set the ID\n+        int rowsAffected = pst.executeUpdate();\n+\n+        if (rowsAffected > 0) {\n+            System.out.println(\"Update successful!\");\n+            flag = true;\n+        } else {\n+            System.out.println(\"No record found with the given ID.\");\n+        }\n+\n+    } catch (NumberFormatException nfe) {\n+        System.out.println(\"Invalid input for age. It must be a number.\");\n+        nfe.printStackTrace();\n+    } catch (SQLException sqle) {\n+        System.out.println(\"Database error. Please check your query and connection.\");\n+        sqle.printStackTrace();\n+    } catch (Exception e) {\n+        System.out.println(\"Something went wrong. Please try again.\");\n+        e.printStackTrace();\n     }\n+\n+    return flag;\n }\n-import java.io.BufferedWriter;\n-import java.io.FileWriter;\n-import java.io.BufferedReader;\n-import java.io.FileReader;\n \n+    @Override\n+    public boolean searchForStudent(int id) {\n+        boolean flag = false;\n \n+        try {\n+            Connection con = DBConnection.createConnection();\n+            String query = \"SELECT * FROM student WHERE id = ?\";\n+            PreparedStatement pst = con.prepareStatement(query);\n \n+            pst.setInt(1, id);\n+            ResultSet rs = pst.executeQuery();\n \n-public class StudentManagement  {\n-    private static ArrayList<Student> students = new ArrayList<>();\n-    \n-                //default constructor\n-        public StudentManagement(){\n-            StudentManagement.students = new ArrayList<>();\n-        }\n-               //sorting by name\n-        public void sortByName(){\n-            Collections.sort(students, Comparator.comparing(Student::getName));\n-            System.out.println(\"students sorted by Name:\");\n-            displayStudents();\n-    \n-        }\n-                //sorting by grade\n-        public void sortByGrade(){\n-            Collections.sort(students, Comparator.comparing(Student::getGrade));\n-            System.out.println(\"students sorted by Grade\");\n-            displayStudents();\n-        }\n-             //Display All students\n-        public void displayStudents(){\n-            for(Student student: students){\n-                System.out.println(student);\n-                if(students.isEmpty()){\n-                    System.out.println(\"No student records to display.\");\n-                }\n+            if (rs.next()) {\n+                System.out.println(\"Id: \" + rs.getInt(1) +\n+                                   \"\\nName: \" + rs.getString(2) +\n+                                   \"\\nAge: \" + rs.getInt(3) +\n+                                   \"\\nGrade: \" + rs.getString(4));\n+                System.out.println(\"-------------------------------\");\n+                flag = true;\n             }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n         }\n-              \n-    \n-    \n-    \n-    \n-                //Save to file\n-        public void saveToFile(String saveFile){\n-           try(BufferedWriter Writer = new BufferedWriter(new FileWriter(saveFile))){\n-             for(Student student:students){\n-                Writer.write(student.getId()+\",\"+student.getName()+\",\"+student.getAge()+\",\"+student.getGrade());\n-                Writer.newLine();\n-             }\n-             System.out.println(\"Student records saved to\" + saveFile);\n-           }\n-           catch(IOException e){\n-            if(e.getMessage().contains(\"No such file or directory\")){\n-                System.out.println(\"Error: The specified path doesn't exist. Please provide a valid file path.\");\n-            }\n-            else{\n-                System.out.println(\"Error saving to file:\" + e.getMessage());\n-    \n-            }\n-        }\n-             \n-    \n-           \n-        }\n-           //load from file\n-           public static List<Student> loadFromFile(String loadFile) {\n-            try (BufferedReader reader = new BufferedReader(new FileReader(loadFile))) {\n-                String line;\n-                students.clear(); // Clear old records\n-        \n-                System.out.println(\"Attempting to load from file: \" + loadFile);\n-        \n-                while ((line = reader.readLine()) != null) {\n-                    System.out.println(\"Reading line: \" + line);\n-        \n-                    String[] parts = line.split(\",\");\n-                    System.out.println(\"Parsed parts: \" + Arrays.toString(parts));\n-        \n-                    if (parts.length == 4) {\n-                        try {\n-                            int id = Integer.parseInt(parts[0]);\n-                            String name = parts[1];\n-                            int age = Integer.parseInt(parts[2]);\n-                            String grade = parts[3];\n-        \n-                            students.add(new Student(id, name, age, grade));\n-                            System.out.println(\"Student added: \" + id + \", \" + name + \", \" + age + \", \" + grade);\n-\n-                        } catch (NumberFormatException nfe) {\n-                            System.out.println(\"Invalid student record: \" + line);\n-                            nfe.printStackTrace();\n-                        }\n-                    } else {\n-                        System.out.println(\"Skipping invalid line: \" + line);\n-                    }\n-                }\n-                System.out.println(\"Student records loaded: \" + students);\n-            } catch (IOException e) {\n-                System.out.println(\"Error loading from file: \" + e.getMessage());\n-            }\n-            return students;\n-        }\n-        \n-    public void addStudent(Student student) {\n-        students.add(student);\n+        return flag;\n     }\n-    \n-    \n-    public List<Student> getStudents() {\n-        // Return the list of students\n-        return students;\n-    }\n-    public void clearStudents(){\n-        // clear the students list\n-      students.clear();\n-    }\n-    \n-    \n-    \n-   \n-    \n }\n-\n-   \n- \n-   \n"
                },
                {
                    "date": 1734524948401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,9 @@\n package pms.studentmanagement;\n \n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import pms.dao.DAO;\n-import pms.db.DBConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n import pms.student.Student;\n \n public class StudentManagement implements DAO {\n \n"
                },
                {
                    "date": 1734524988948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,13 @@\n package pms.studentmanagement;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import pms.dao.DAO;\n+import pms.db.DBConnection;\n import pms.student.Student;\n \n public class StudentManagement implements DAO {\n \n"
                },
                {
                    "date": 1734525000348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,7 @@\n package pms.studentmanagement;\n \n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import pms.dao.DAO;\n-import pms.db.DBConnection;\n+import java.util.ArrayList;\n import pms.student.Student;\n \n public class StudentManagement implements DAO {\n \n"
                },
                {
                    "date": 1734525062280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,154 +1,138 @@\n package pms.studentmanagement;\n \n import java.util.ArrayList;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n import pms.student.Student;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.io.IOException;\n \n-public class StudentManagement implements DAO {\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n \n-    @Override\n-    public boolean insertStudent(Student s) {\n-        boolean flag = false;\n \n-        try {\n-            Connection con = DBConnection.createConnection();\n-            String query = \"INSERT INTO student (name, age, grade) VALUES (?, ?, ?)\";\n-            PreparedStatement pst = con.prepareStatement(query);\n \n-            // Set the values for the parameters\n-            pst.setString(1, s.getName());\n-            pst.setInt(2, s.getAge());\n-            pst.setString(3, s.getGrade());\n \n-            pst.executeUpdate(); // Execute the query\n-            flag = true;\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+public class StudentManagement  {\n+    private static ArrayList<Student> students = new ArrayList<>();\n+    \n+                //default constructor\n+        public StudentManagement(){\n+            StudentManagement.students = new ArrayList<>();\n         }\n-        return flag;\n-    }\n-\n-    @Override\n-    public boolean delete(int id) {\n-        boolean flag = false;\n-\n-        try {\n-            Connection con = DBConnection.createConnection();\n-            String query = \"DELETE FROM student WHERE id = ?\";\n-            PreparedStatement pst = con.prepareStatement(query);\n-\n-            pst.setInt(1, id); // Set the ID parameter\n-            int rowsAffected = pst.executeUpdate();\n-\n-            if (rowsAffected > 0) {\n-                flag = true;\n+               //sorting by name\n+        public void sortByName(){\n+            Collections.sort(students, Comparator.comparing(Student::getName));\n+            System.out.println(\"students sorted by Name:\");\n+            displayStudents();\n+    \n+        }\n+                //sorting by grade\n+        public void sortByGrade(){\n+            Collections.sort(students, Comparator.comparing(Student::getGrade));\n+            System.out.println(\"students sorted by Grade\");\n+            displayStudents();\n+        }\n+             //Display All students\n+        public void displayStudents(){\n+            for(Student student: students){\n+                System.out.println(student);\n+                if(students.isEmpty()){\n+                    System.out.println(\"No student records to display.\");\n+                }\n             }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n         }\n-        return flag;\n-    }\n-\n-    @Override\n-    public void showAllStudents() {\n-        try {\n-            Connection con = DBConnection.createConnection();\n-            String query = \"SELECT * FROM student\";\n-            Statement stmt = con.createStatement();\n-            ResultSet rs = stmt.executeQuery(query);\n-\n-            while (rs.next()) {\n-                System.out.println(\"Id: \" + rs.getInt(1) +\n-                                   \"\\nName: \" + rs.getString(2) +\n-                                   \"\\nAge: \" + rs.getInt(3) +\n-                                   \"\\nGrade: \" + rs.getString(4));\n-                System.out.println(\"-------------------------------\");\n+              // Add other methods like Add,Update,delete etc\n+    \n+    \n+    \n+    \n+                //Save to file\n+        public void saveToFile(String saveFile){\n+           try(BufferedWriter Writer = new BufferedWriter(new FileWriter(saveFile))){\n+             for(Student student:students){\n+                Writer.write(student.getId()+\",\"+student.getName()+\",\"+student.getAge()+\",\"+student.getGrade());\n+                Writer.newLine();\n+             }\n+             System.out.println(\"Student records saved to\" + saveFile);\n+           }\n+           catch(IOException e){\n+            if(e.getMessage().contains(\"No such file or directory\")){\n+                System.out.println(\"Error: The specified path doesn't exist. Please provide a valid file path.\");\n             }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+            else{\n+                System.out.println(\"Error saving to file:\" + e.getMessage());\n+    \n+            }\n         }\n-    }\n-\n-    @Override\n-public boolean update(int id, String update, int choice, Student s) {\n-    boolean flag = false;\n-\n-    try {\n-        Connection con = DBConnection.createConnection();\n-        String query = \"\";\n-\n-        switch (choice) {\n-            case 1: // Update name\n-                query = \"UPDATE student SET name = ? WHERE id = ?\";\n-                break;\n-            case 2: // Update age\n-                query = \"UPDATE student SET age = ? WHERE id = ?\";\n-                break;\n-            case 3: // Update grade\n-                query = \"UPDATE student SET grade = ? WHERE id = ?\";\n-                break;\n-            default:\n-                System.out.println(\"Invalid choice!\");\n-                return false;\n+             \n+    \n+           \n         }\n+           //load from file\n+           public static List<Student> loadFromFile(String loadFile) {\n+            try (BufferedReader reader = new BufferedReader(new FileReader(loadFile))) {\n+                String line;\n+                students.clear(); // Clear old records\n+        \n+                System.out.println(\"Attempting to load from file: \" + loadFile);\n+        \n+                while ((line = reader.readLine()) != null) {\n+                    System.out.println(\"Reading line: \" + line);\n+        \n+                    String[] parts = line.split(\",\");\n+                    System.out.println(\"Parsed parts: \" + Arrays.toString(parts));\n+        \n+                    if (parts.length == 4) {\n+                        try {\n+                            int id = Integer.parseInt(parts[0]);\n+                            String name = parts[1];\n+                            int age = Integer.parseInt(parts[2]);\n+                            String grade = parts[3];\n+        \n+                            students.add(new Student(id, name, age, grade));\n+                            System.out.println(\"Student added: \" + id + \", \" + name + \", \" + age + \", \" + grade);\n \n-        PreparedStatement pst = con.prepareStatement(query);\n-\n-        // Set the parameter value based on choice\n-        if (choice == 1) {\n-            pst.setString(1, update); // Use the `update` parameter directly for name\n-        } else if (choice == 2) {\n-            pst.setInt(1, Integer.parseInt(update)); // Convert `update` to int for age\n-        } else if (choice == 3) {\n-            pst.setString(1, update); // Use the `update` parameter directly for grade\n+                        } catch (NumberFormatException nfe) {\n+                            System.out.println(\"Invalid student record: \" + line);\n+                            nfe.printStackTrace();\n+                        }\n+                    } else {\n+                        System.out.println(\"Skipping invalid line: \" + line);\n+                    }\n+                }\n+                System.out.println(\"Student records loaded: \" + students);\n+            } catch (IOException e) {\n+                System.out.println(\"Error loading from file: \" + e.getMessage());\n+            }\n+            return students;\n         }\n-\n-        pst.setInt(2, id); // Set the ID\n-        int rowsAffected = pst.executeUpdate();\n-\n-        if (rowsAffected > 0) {\n-            System.out.println(\"Update successful!\");\n-            flag = true;\n-        } else {\n-            System.out.println(\"No record found with the given ID.\");\n-        }\n-\n-    } catch (NumberFormatException nfe) {\n-        System.out.println(\"Invalid input for age. It must be a number.\");\n-        nfe.printStackTrace();\n-    } catch (SQLException sqle) {\n-        System.out.println(\"Database error. Please check your query and connection.\");\n-        sqle.printStackTrace();\n-    } catch (Exception e) {\n-        System.out.println(\"Something went wrong. Please try again.\");\n-        e.printStackTrace();\n+        \n+    public void addStudent(Student student) {\n+        students.add(student);\n     }\n-\n-    return flag;\n+    \n+    \n+    public List<Student> getStudents() {\n+        // Return the list of students\n+        return students;\n+    }\n+    public void clearStudents(){\n+        // clear the students list\n+      students.clear();\n+    }\n+    \n+    \n+    \n+   \n+    \n }\n \n-    @Override\n-    public boolean searchForStudent(int id) {\n-        boolean flag = false;\n-\n-        try {\n-            Connection con = DBConnection.createConnection();\n-            String query = \"SELECT * FROM student WHERE id = ?\";\n-            PreparedStatement pst = con.prepareStatement(query);\n-\n-            pst.setInt(1, id);\n-            ResultSet rs = pst.executeQuery();\n-\n-            if (rs.next()) {\n-                System.out.println(\"Id: \" + rs.getInt(1) +\n-                                   \"\\nName: \" + rs.getString(2) +\n-                                   \"\\nAge: \" + rs.getInt(3) +\n-                                   \"\\nGrade: \" + rs.getString(4));\n-                System.out.println(\"-------------------------------\");\n-                flag = true;\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return flag;\n-    }\n-}\n+   \n+ \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1734525152557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n package pms.studentmanagement;\n \n import java.util.ArrayList;\n-import java.util.ArrayList;\n import java.util.Arrays;\n \n import pms.student.Student;\n import java.util.Collections;\n"
                }
            ],
            "date": 1734519916860,
            "name": "Commit-0",
            "content": "package pms.studentmanagement;\n\nimport java.util.ArrayList;\nimport pms.student.Student;\n<<<<<<< HEAD\n=======\nimport java.util.Arrays;\n\n>>>>>>> main\nimport pms.student.Student;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.io.IOException;\n\n<<<<<<< HEAD\npublic class StudentManagement {\n    private ArrayList<Student> students = new ArrayList<>();\n\n    // Add a new student\n    public void addStudent(Student student) {\n        students.add(student);\n        System.out.println(\"Student added successfully!\");\n    }\n\n    // Display all students\n    public void displayStudents() {\n        if (students.isEmpty()) {\n            System.out.println(\"No students to display.\");\n        } else {\n            System.out.println(\"Student Records:\");\n            for (Student student : students) {\n                System.out.println(student);\n            }\n        }\n    }\n\n    // Find and delete a student by ID\n    public boolean deleteStudent(int id) {\n        boolean removed = false;\n        for (Student student : students) {\n            if (student.getId() == id) {\n                students.remove(student);\n                removed = true;\n                break;\n            }\n        }\n        return removed;\n    }\n\n    // Update a student's details\n    public boolean updateStudent(int id, String newValue, int choice) {\n        for (Student student : students) {\n            if (student.getId() == id) {\n                switch (choice) {\n                    case 1: { // Update name\n                        student.setName(newValue);\n                        break;\n                    }\n                    case 2: { // Update age\n                        try {\n                            int newAge = Integer.parseInt(newValue);\n                            student.setAge(newAge);\n                        } catch (NumberFormatException e) {\n                            System.out.println(\"Invalid age format. Please enter a number.\");\n                            return false;\n                        }\n                        break;\n                    }\n                    case 3: { // Update grade\n                        student.setGrade(newValue);\n                        break;\n                    }\n                    default: {\n                        System.out.println(\"Invalid update choice.\");\n                        return false;\n                    }\n                }\n                return true; // Update successful\n            }\n        }\n        return false; // Student not found\n    }\n\n    // Search for a student by ID\n    public Student searchStudent(int id) {\n        for (Student student : students) {\n            if (student.getId() == id) {\n                return student;\n            }\n        }\n        return null; // Student not found\n    }\n}\n=======\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\n\n\n\n\npublic class StudentManagement  {\n    private static ArrayList<Student> students = new ArrayList<>();\n    \n                //default constructor\n        public StudentManagement(){\n            StudentManagement.students = new ArrayList<>();\n        }\n               //sorting by name\n        public void sortByName(){\n            Collections.sort(students, Comparator.comparing(Student::getName));\n            System.out.println(\"students sorted by Name:\");\n            displayStudents();\n    \n        }\n                //sorting by grade\n        public void sortByGrade(){\n            Collections.sort(students, Comparator.comparing(Student::getGrade));\n            System.out.println(\"students sorted by Grade\");\n            displayStudents();\n        }\n             //Display All students\n        public void displayStudents(){\n            for(Student student: students){\n                System.out.println(student);\n                if(students.isEmpty()){\n                    System.out.println(\"No student records to display.\");\n                }\n            }\n        }\n              // Add other methods like Add,Update,delete etc\n    \n    \n    \n    \n                //Save to file\n        public void saveToFile(String saveFile){\n           try(BufferedWriter Writer = new BufferedWriter(new FileWriter(saveFile))){\n             for(Student student:students){\n                Writer.write(student.getId()+\",\"+student.getName()+\",\"+student.getAge()+\",\"+student.getGrade());\n                Writer.newLine();\n             }\n             System.out.println(\"Student records saved to\" + saveFile);\n           }\n           catch(IOException e){\n            if(e.getMessage().contains(\"No such file or directory\")){\n                System.out.println(\"Error: The specified path doesn't exist. Please provide a valid file path.\");\n            }\n            else{\n                System.out.println(\"Error saving to file:\" + e.getMessage());\n    \n            }\n        }\n             \n    \n           \n        }\n           //load from file\n           public static List<Student> loadFromFile(String loadFile) {\n            try (BufferedReader reader = new BufferedReader(new FileReader(loadFile))) {\n                String line;\n                students.clear(); // Clear old records\n        \n                System.out.println(\"Attempting to load from file: \" + loadFile);\n        \n                while ((line = reader.readLine()) != null) {\n                    System.out.println(\"Reading line: \" + line);\n        \n                    String[] parts = line.split(\",\");\n                    System.out.println(\"Parsed parts: \" + Arrays.toString(parts));\n        \n                    if (parts.length == 4) {\n                        try {\n                            int id = Integer.parseInt(parts[0]);\n                            String name = parts[1];\n                            int age = Integer.parseInt(parts[2]);\n                            String grade = parts[3];\n        \n                            students.add(new Student(id, name, age, grade));\n                            System.out.println(\"Student added: \" + id + \", \" + name + \", \" + age + \", \" + grade);\n\n                        } catch (NumberFormatException nfe) {\n                            System.out.println(\"Invalid student record: \" + line);\n                            nfe.printStackTrace();\n                        }\n                    } else {\n                        System.out.println(\"Skipping invalid line: \" + line);\n                    }\n                }\n                System.out.println(\"Student records loaded: \" + students);\n            } catch (IOException e) {\n                System.out.println(\"Error loading from file: \" + e.getMessage());\n            }\n            return students;\n        }\n        \n    public void addStudent(Student student) {\n        students.add(student);\n    }\n    \n    \n    public List<Student> getStudents() {\n        // Return the list of students\n        return students;\n    }\n    public void clearStudents(){\n        // clear the students list\n      students.clear();\n    }\n    \n    \n    \n   \n    \n}\n\n   \n \n   \n>>>>>>> main\n"
        }
    ]
}